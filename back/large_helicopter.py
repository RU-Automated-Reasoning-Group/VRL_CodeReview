import os.path
import scipy.linalg as la
from main import *

from shield import Shield
from Environment import Environment

def helicopter (learning_method, number_of_rollouts, simulation_steps, K=None):
  HERE = os.path.dirname(os.path.abspath(__file__))
  filename_A = HERE+"/aux-matrices/helicopter_A.txt"
  filename_B = HERE+"/aux-matrices/helicopter_B.txt"

  # First read the continuous system from the txt file.
  with open(filename_A, 'r') as f:
      A_conti = []
      for line in f: # read rest of lines
          A_conti.append([float(x) for x in line.rstrip(', \n').strip(' ').split(',')])
  with open(filename_B, 'r') as f:
      B_conti = []
      for line in f: # read rest of lines
          B_conti.append([float(x) for x in line.rstrip(', \n').strip(' ').split(',')])


  time_step = 0.1
  dim = len(A_conti[0])

  # Discretize the system using matrix exponential

  A_conti = np.array(A_conti)
  B_conti = np.array(B_conti)

  A = la.expm(A_conti * time_step)
  B = np.dot( np.dot(np.linalg.inv(A_conti), (A - np.eye(dim))), B_conti)

  eq_err = 1e-2

  #intial state space
  #initial_size = 0.004
  #0.1 - initial_size/10, 0.1 + initial_size/10
  s_min = np.array([[ 0.0996],[0.0996], [0.0996],[0.0996],[0.0996], [0.0996],[0.0996],[0.0996], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0]])
  s_max = np.array([[ 0.1004],[0.1004], [0.1004],[0.1004],[0.1004], [0.1004],[0.1004],[0.1004], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0]])
  S0 = Polyhedron.from_bounds(s_min, s_max)

  #sample an initial condition for system
  x0 = np.matrix([
                    [random.uniform(s_min[0, 0], s_max[0, 0])], 
                    [random.uniform(s_min[1, 0], s_max[1, 0])],
                    [random.uniform(s_min[2, 0], s_max[2, 0])],
                    [random.uniform(s_min[3, 0], s_max[3, 0])], 
                    [random.uniform(s_min[4, 0], s_max[4, 0])],
                    [random.uniform(s_min[5, 0], s_max[5, 0])],
                    [random.uniform(s_min[6, 0], s_max[6, 0])], 
                    [random.uniform(s_min[7, 0], s_max[7, 0])],
                    [random.uniform(s_min[8, 0], s_max[8, 0])],
                    [random.uniform(s_min[9, 0], s_max[9, 0])], 
                    [random.uniform(s_min[10, 0], s_max[10, 0])],
                    [random.uniform(s_min[11, 0], s_max[11, 0])],
                    [random.uniform(s_min[12, 0], s_max[12, 0])], 
                    [random.uniform(s_min[13, 0], s_max[13, 0])],
                    [random.uniform(s_min[14, 0], s_max[14, 0])],
                    [random.uniform(s_min[15, 0], s_max[15, 0])], 
                    [random.uniform(s_min[16, 0], s_max[16, 0])],
                    [random.uniform(s_min[17, 0], s_max[17, 0])],
                    [random.uniform(s_min[18, 0], s_max[18, 0])], 
                    [random.uniform(s_min[19, 0], s_max[19, 0])],
                    [random.uniform(s_min[20, 0], s_max[20, 0])],
                    [random.uniform(s_min[21, 0], s_max[21, 0])], 
                    [random.uniform(s_min[22, 0], s_max[22, 0])],
                    [random.uniform(s_min[23, 0], s_max[23, 0])],
                    [random.uniform(s_min[24, 0], s_max[24, 0])],
                    [random.uniform(s_min[25, 0], s_max[25, 0])],
                    [random.uniform(s_min[26, 0], s_max[26, 0])],
                    [random.uniform(s_min[27, 0], s_max[27, 0])]
                  ])
  print ("Sampled initial state is:\n {}".format(x0))

  Q = np.zeros((28, 28), float)
  np.fill_diagonal(Q, 10)

  R = np.zeros((6,6), float)
  np.fill_diagonal(R, 10)

  x_min = np.array([[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8]])
  x_max = np.array([[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8], [8]])
  u_min = np.array([[-10.],[-10.],[-10.],[-10.],[-10.],[-10.]])
  u_max = np.array([[ 10.],[ 10.],[ 10.],[ 10.],[ 10.],[ 10.]])

  env = Environment(A, B, u_min, u_max, s_min, s_max, x_min, x_max, Q, R, continuous=False)

  ############ Train and Test NN model ############

  #################### Shield #################
  shield = Shield(env, None, "./models", force_learning=True)
  shield.train_shield(learning_method, number_of_rollouts, simulation_steps, eq_err=eq_err, explore_mag = 0.00004, step_size = 0.00005, lqr_start=True)
  #shield.test_shield(1000, 5000)

#train_shield run time: 4965.779382 s
helicopter("random_search", 100, 100)

  # if K is None:
  #   while True:
  #     K = learn_controller (A, B, Q, R, x0, eq_err, learning_method, number_of_rollouts, simulation_steps, x_min, x_max, False, .1, None, 0.00004, 0.00005)
  #     names = {0:"x0", 1:"x1", 2:"x2", 3:"x3", 4:"x4", 5:"x5", 6:"x6", 7:"x7", 8:"x8", 9:"x9", 10:"x10", 11:"x11", 12:"x12", 13:"x13", 14:"x14", 15:"x15", 16:"x16", 17:"x17", 18:"x18", 19:"x19", 20:"x20", 21:"x21", 22:"x22", 23:"x23", 24:"x24", 25:"x25", 26:"x26", 27:"27"}
  #     draw_controller (A, B, K, x0, simulation_steps*50, names)
  #     names = {0:"x0", 1:"x1"}
  #     #O_inf = verify_controller (np.asarray(A), np.asarray(B), np.asarray(K), x_min, x_max, u_min, u_max, names.keys())
  #     #ce = S0.is_included_in_with_ce(O_inf)
  #     #if ce is None:
  #     #  print "A verified policy is learned!"
  #     #  break
  #     #else:
  #     #  print "Is the learned policy working well on the sampled input?: {}".format(O_inf.contains(x0))
  #     #  print "An input that is not within the current invariant set:\n {}".format(ce)
  #     #  x0 = np.asmatrix(ce)
  #     break
  # else:
  #   names = {0:"x0", 1:"x1", 2:"x2", 3:"x3", 4:"x4", 5:"x5", 6:"x6", 7:"x7", 8:"x8", 9:"x9", 10:"x10", 11:"x11", 12:"x12", 13:"x13", 14:"x14", 15:"x15", 16:"x16", 17:"x17", 18:"x18", 19:"x19", 20:"x20", 21:"x21", 22:"x22", 23:"x23", 24:"x24", 25:"x25", 26:"x26", 27:"27"}
  #   draw_controller (A, B, K, x0, simulation_steps*50, names)
  #   names = {0:"x0", 1:"x1"}
  #   O_inf = verify_controller (np.asarray(A), np.asarray(B), np.asarray(K), x_min, x_max, u_min, u_max, names.keys())
  #   ce = S0.is_included_in_with_ce(O_inf)
  #   if ce is None:
  #     print "Control Policy Verified!"
  #   else:
  #     print "A counter example is found {}".format(ce)


# K = [[ 9.27181803e-05 -6.30310676e-05  4.68769531e-05 -5.37581980e-05
#    1.17716848e-04 -9.44848042e-05  5.20840603e-05  2.03466834e-05
#    9.64030016e-05 -1.26506861e-04 -2.14222521e-05  5.99326131e-05
#   -4.73784860e-05 -6.83703135e-05 -1.25075810e-04 -1.50342786e-05
#   -2.99807664e-05  1.94457883e-04  1.94872228e-04 -2.08041619e-06
#   -3.71999993e-05 -1.33357991e-04  1.83594875e-06  2.60914267e-04
#    4.71438879e-06  5.39519493e-05 -4.18335846e-05  1.42182492e-04]
#  [-1.12910816e-04  1.17235986e-04  6.86403350e-05 -4.93844158e-05
#    2.23150410e-04 -9.55139019e-05 -1.33476211e-04  1.14902666e-04
#    2.62272550e-06 -1.73028351e-04  1.15214745e-05  1.13492708e-05
#   -2.54057859e-05  8.12441602e-05 -8.01532298e-05  1.76994261e-04
#   -8.88638151e-06  2.08870600e-05 -1.59505133e-05  1.97863812e-04
#    2.59160636e-04  1.41155361e-04  5.16364522e-05  1.61058269e-05
#   -7.92315546e-05  8.72914624e-05  1.94530393e-04 -2.36463243e-05]
#  [-8.54673312e-06 -1.36454723e-04  1.51295325e-05 -1.43878763e-04
#   -6.99614252e-05  1.69186307e-05 -1.14086620e-04 -1.08415172e-04
#    3.10553793e-05  1.06438387e-04 -4.19298914e-05 -1.02102260e-04
#   -3.23682285e-05  1.01568730e-04  9.03964301e-05  3.51070825e-05
#   -1.86682431e-04  7.60696654e-05  1.36705470e-05  1.16871577e-05
#    1.74040275e-05  2.83677095e-05 -2.31007705e-06 -5.54418762e-05
#    5.09543191e-05  1.57240797e-05  2.59463567e-05 -2.29522761e-04]
#  [-5.32230673e-05 -1.29170115e-04  2.48675909e-04  1.79235083e-04
#   -2.18174314e-04 -9.52717220e-05  1.36774200e-04  2.17528049e-04
#    9.57914987e-05  8.51455744e-05  8.20686285e-05 -2.15854692e-04
#   -2.69612939e-04  9.08972958e-06 -1.25918356e-04  5.77424996e-05
#    4.08589157e-05 -4.05410010e-04 -1.68755774e-04 -1.78904391e-05
#   -3.43287997e-04  2.19848861e-05 -3.87251592e-05 -1.06293071e-04
#    9.26734864e-05 -2.00563525e-05 -1.34180115e-04  9.75814479e-05]
#  [ 1.84624646e-04  6.71059291e-05  5.92998693e-05  5.62782292e-05
#    7.74265574e-05  5.61751580e-05 -2.16447602e-05  1.51745777e-05
#   -3.76147055e-05 -1.24928375e-05 -7.59285247e-05 -9.86327308e-05
#   -3.02594821e-04  1.16006452e-04  1.36359906e-04 -9.71489531e-05
#   -9.10486798e-05  3.43147072e-05  1.19395220e-04 -6.68255066e-05
#    3.01469012e-05 -1.56169789e-04  1.35863745e-04  5.80317859e-05
#   -1.42536142e-04  7.31624503e-05 -2.18739848e-05 -1.89308612e-04]
#  [ 7.37809208e-05 -2.09871381e-04 -1.98653573e-04  8.51820420e-05
#    3.83437977e-05 -1.21104365e-04  2.92903874e-04  2.38081056e-04
#    1.84672918e-05  1.22771154e-04  7.32355389e-05 -1.79651733e-04
#    8.84974537e-05  1.03034253e-04  1.21297289e-04 -2.44622301e-04
#    2.01493393e-04  1.64842798e-04 -7.84980073e-05  2.40099050e-06
#    5.84517315e-05 -7.15772008e-05 -2.01045999e-04 -1.02285254e-04
#   -2.02586702e-04  1.72395374e-04  5.96901898e-05  3.38366617e-04]]

# K = np.array([[-1.32941228e-03, -2.65250470e-04,  5.16665924e-05, -5.67107248e-04,
#    4.53087016e-04, -7.13411839e-04,  6.88630180e-05, -3.42709360e-04,
#   -5.12265709e-04,  8.40275907e-04, -4.79816226e-05,  4.67033252e-04,
#    3.46213108e-04, -4.24767584e-04,  2.15396159e-04,  6.15664317e-04,
#   -2.12407933e-04,  2.21302563e-04,  3.85520022e-04, -7.72155021e-04,
#   -1.71842024e-04, -1.41528869e-03, -1.17372622e-04, -4.94277759e-04,
#    3.87340355e-04,  6.64048251e-04,  1.62896797e-04,  6.98542168e-04],
#  [ 4.00055232e-04, -2.46239094e-04, -2.92687677e-04, -4.91010378e-04,
#   -4.24925173e-04, -3.14207941e-04, -1.82543188e-04, -3.83632698e-04,
#   -5.52383425e-04, -3.79181954e-04,  7.89661467e-04,  4.23276498e-04,
#   -1.44206120e-04,  9.03140733e-05,  6.55192128e-04,  3.08822818e-04,
#   -2.37005999e-05,  3.21662536e-04,  7.59863816e-05,  4.03809467e-04,
#   -2.78756238e-04, -1.91118829e-04,  2.17346401e-04,  5.04115006e-04,
#    8.44521630e-06,  1.56071982e-04, -3.59886003e-04,  6.05795133e-04],
#  [-6.92299047e-04, -8.55127243e-04, -3.24776441e-04, -1.18501709e-03,
#   -3.94648568e-04,  8.41974210e-04, -6.71343605e-04,  2.60786469e-04,
#    4.71734770e-04,  3.19774984e-04,  6.43513079e-04, -9.26071780e-04,
#    6.87684805e-04, -7.23449584e-04, -6.02800424e-04, -2.03790437e-04,
#    1.22986647e-03, -6.10655926e-04,  1.17784314e-04, -8.25463516e-04,
#   -9.19001786e-04,  5.51509605e-04, -5.32145317e-04,  8.32213567e-04,
#   -1.80240056e-04, -7.05639254e-04,  2.89620296e-04, -2.43938867e-04],
#  [ 7.94777790e-05, -4.10762890e-04,  8.61331132e-04, -3.35899300e-04,
#    4.68333721e-04, -6.48594490e-04, -6.01822466e-05,  1.11289277e-04,
#    4.87376176e-04,  5.84756231e-04,  4.16820294e-04,  1.13866841e-04,
#    5.83815006e-04,  6.03385096e-05,  4.30003313e-05, -1.12103499e-04,
#    7.53192722e-04,  5.68738753e-04,  4.79116540e-04, -3.25855311e-04,
#   -7.92091066e-04,  2.42819021e-04, -4.39101670e-04, -1.54337453e-04,
#   -4.83666989e-05,  1.20622595e-03, -8.61407675e-04, -1.43230143e-04],
#  [ 4.53494098e-04,  2.77105395e-04, -7.82191225e-04, -5.11768672e-05,
#    6.07969744e-04, 8.58674631e-04, -8.97398254e-04,  2.62984050e-04,
#   -8.84447654e-05,  8.23046755e-04,  9.65257861e-04,  7.83677738e-04,
#    5.39094060e-04,  2.14406643e-04,  3.42563843e-04, -7.91482662e-05,
#    2.74756231e-04, -4.71637292e-04,  3.76703435e-04,  3.55264745e-04,
#   -3.36464046e-04,  1.34298998e-04, -9.79712100e-05, -3.42738182e-05,
#    6.95330632e-05, -4.22970992e-04,  3.64171420e-04,  2.97978793e-04],
#  [ 5.23149251e-06, -5.73086066e-04,  5.92198285e-04,  8.36623810e-04,
#    5.49674150e-04,  1.12883432e-03,  4.77919900e-04, -2.70257267e-04,
#   -3.61789014e-05, 1.48972160e-03, -1.71526619e-04, 4.42512009e-04,
#    1.41303071e-05,  5.96923037e-05,  4.26162291e-04, -2.30660318e-04,
#   -7.38609986e-04, -1.21432997e-04,  7.51388528e-04, -3.17630289e-04,
#   -9.44829119e-05,  6.32537121e-04, 1.95626029e-04, -3.69060210e-04,
#   -1.68180846e-04, -3.30200833e-05,  4.75970541e-04,  1.19401706e-04]])

# K = np.array([[ 5.82504672e+01  2.39389380e+00 -5.03047122e-01 -3.10351395e+00
#    4.85794565e+00  6.65722277e-03  7.68115898e-02  1.04087784e-01
#   -3.29419741e+01 -1.63720170e+00  2.53578077e-01  1.94992285e+00
#   -2.51130238e+00 -1.71159568e-01 -1.12709623e-01 -9.85406307e-02
#   -9.05440129e+00 -7.17787524e-01 -2.85627931e-01 -5.89689854e-01
#    6.44875584e-04 -1.40415668e-03  3.69873636e-03 -1.41991261e-02
#   -1.87741989e-01  5.84705808e-02  7.64103066e-02 -1.00047580e-01]
#  [-1.42207809e+00 -4.89831282e-02 -3.71016491e-02  6.35582094e-01
#   -7.31459941e-02 -1.22230686e-02  1.34329350e-02  6.28927084e-03
#    7.10159415e-01  5.73283007e-01  2.94493441e-02 -4.13736526e-01
#    1.20960443e-01 -4.27380140e-05  4.54923975e-02  5.74581680e-03
#   -3.92980157e-02  2.05301111e-02  3.15556368e-01 -3.76689989e-02
#    1.59921228e-03 -3.53160436e-03  2.73617753e-04  5.05627768e-04
#   -1.62532560e-02 -5.32864789e-03  1.32906738e-02  5.41662495e-03]
#  [ 4.44328995e+00  6.84883615e-01  2.78379175e-01 -5.16771639e+00
#    1.10945445e-01  3.29913520e-03 -4.25791395e-02 -8.45638039e-02
#   -1.26001804e+00 -4.62138953e+00 -2.16428951e-01  3.29622042e+00
#   -7.35965567e-01 -3.41287440e-02 -3.52056931e-01 -3.68521827e-02
#    1.00185515e+00  1.28628781e-01 -2.71101478e+00  4.00390016e-01
#   -1.18325143e-02  2.83757527e-02 -6.80560412e-04 -7.11612136e-03
#    1.69380456e-01  5.12149853e-02 -4.20130745e-02 -3.86040989e-02]
#  [-1.09558691e+01 -1.34636290e+00  3.91191254e-01  2.38931256e+00
#   -5.96554169e-01  1.70059059e-02 -3.87631662e-02  3.01802859e-01
#    4.55564852e+00  3.13210397e-01 -3.66969446e-01 -1.42555298e+00
#    1.09380635e+00  3.28680708e-01  1.30253416e-02  7.12626792e-03
#   -3.69030164e+00 -4.85888178e-01  4.15123834e-01 -1.50576945e+00
#   -1.92594130e-03 -5.61015201e-03 -3.40994787e-03  7.38488376e-03
#   -4.83272192e-01 -8.42244171e-02 -3.96801033e-02  5.74482430e-02]
#  [-1.55988582e+00 -5.65030255e-02  1.21478732e-01 -4.40291113e-01
#   -1.21062034e-01  9.51780959e-03  3.27902862e-03  3.27145114e-02
#    8.36023546e-01 -7.55263940e-01 -1.02647710e-01  3.03786674e-01
#    7.45408720e-02  5.41797681e-02 -5.77709630e-02 -3.52285458e-03
#   -3.40911828e-01 -5.60171409e-02 -4.38809326e-01 -1.76323307e-01
#   -2.76839250e-03  4.75627304e-03 -6.34896378e-04 -1.62021164e-04
#   -4.57555122e-02 -6.49016147e-03  2.80217460e-03  3.87196021e-03]
#  [-1.52576243e+00 -2.46286350e-02  4.20929570e-02 -6.55544330e-02
#   -1.05544143e-01 -6.73048917e-03  6.73646938e-03  1.29461959e-02
#    8.59579228e-01 -2.01063097e-01 -3.65188821e-02  4.33981684e-02
#    7.69950280e-02  1.99993455e-02 -1.40608123e-02  5.92822963e-04
#   -1.02996237e-01  2.20880289e-03 -1.29078155e-01 -7.61927567e-02
#   -1.30829485e-03  1.91700281e-03 -1.02707372e-03  8.28416457e-04
#   -2.04958242e-02 -3.21669183e-03  6.09524896e-03  3.37044850e-03]])