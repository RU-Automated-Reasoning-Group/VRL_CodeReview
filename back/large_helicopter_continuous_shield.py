from main import *
import numpy as np
from DDPG import *
from shield import Shield
from Environment import Environment

def helicopter (learning_eposides, critic_structure, actor_structure, train_dir, learning_method, number_of_rollouts, simulation_steps):
  HERE = os.path.dirname(os.path.abspath(__file__))
  filename_A = HERE+"/aux-matrices/helicopter_A.txt"
  filename_B = HERE+"/aux-matrices/helicopter_B.txt"

  # First read the continuous system from the txt file.
  with open(filename_A, 'r') as f:
      A_conti = []
      for line in f: # read rest of lines
          A_conti.append([float(x) for x in line.rstrip(', \n').strip(' ').split(',')])
  with open(filename_B, 'r') as f:
      B_conti = []
      for line in f: # read rest of lines
          B_conti.append([float(x) for x in line.rstrip(', \n').strip(' ').split(',')])

  A = np.matrix(A_conti)
  B = np.matrix(B_conti)

  #intial state space
  #initial_size = 0.004
  #0.1 - initial_size/10, 0.1 + initial_size/10
  s_min = np.array([[ 0.0996],[0.0996], [0.0996],[0.0996],[0.0996], [0.0996],[0.0996],[0.0996], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0]])
  s_max = np.array([[ 0.1004],[0.1004], [0.1004],[0.1004],[0.1004], [0.1004],[0.1004],[0.1004], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0],[0], [0],[0]])

  Q = np.zeros((28, 28), float)
  np.fill_diagonal(Q, 10000)

  R = np.zeros((6,6), float)
  np.fill_diagonal(R, .0005)

  x_min = np.array([[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8]])
  x_max = np.array([[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8],[ 8],[ 8], [8], [8]])
  u_min = np.array([[-1.],[-1.],[-1.],[-1.],[-1.],[-1.]])
  u_max = np.array([[ 1.],[ 1.],[ 1.],[ 1.],[ 1.],[ 1.]])

  env = Environment(A, B, u_min, u_max, s_min, s_max, x_min, x_max, Q, R, continuous=True)

  args = { 'actor_lr': 0.0001,
           'critic_lr': 0.001,
           'actor_structure': actor_structure,
           'critic_structure': critic_structure, 
           'buffer_size': 1000000,
           'gamma': 0.99,
           'max_episode_len': 1,
           'max_episodes': learning_eposides,
           'minibatch_size': 64,
           'random_seed': 6553,
           'tau': 0.005,
           'model_path': train_dir+"model.chkp",
           'enable_test': False, 
           'test_episodes': 100,
           'test_episodes_len': 1000}

  actor = DDPG(env, args)
  
  #################### Shield #################
  model_path = os.path.split(args['model_path'])[0]+'/'
  linear_func_model_name = 'K.model'
  model_path = model_path+linear_func_model_name+'.npy'

  shield = Shield(env, actor, model_path, force_learning=False, debug=False)
  shield.train_shield(learning_method, number_of_rollouts, simulation_steps, eq_err=0, explore_mag = 0.000001, step_size = 0.000001)
  shield.test_shield(1000, 5000, mode="single")
  shield.test_shield(1000, 5000, mode="all")

# K = [[-1.15403339e-05,  6.00707704e-06, -8.14756733e-06,  7.20056495e-06,
#   -1.74332251e-06,  9.76319416e-06, -8.45188231e-06, -1.46926157e-05,
#   -2.55649170e-06, -6.52001861e-06, -7.72407639e-06,  8.43337599e-07,
#    6.82538753e-06,  9.36713198e-06, -1.25252265e-05,  5.52100224e-06,
#   -5.59869834e-06,  3.83642389e-06, -3.37607610e-06,  1.90622994e-06,
#   -8.83692163e-06, -6.91804167e-06, -2.50931770e-06, -4.35308619e-06,
#   -1.24363501e-07,  5.88589472e-06, -4.89715811e-06,  4.06562871e-06],
#  [ 6.21853683e-07,  5.66070150e-07,  5.49141941e-06, -3.33037986e-07,
#   -2.28945824e-06,  3.20557830e-06,  4.81573531e-06, -3.02652563e-07,
#    5.58706385e-06, -3.52591663e-06, -4.26579878e-06, -9.27813878e-06,
#    3.57484557e-06,  4.21861531e-06,  5.66140297e-06, -4.22629631e-06,
#   -3.43632559e-06, -6.26250798e-07, -1.06442348e-05,  2.17456696e-06,
#   -1.86585697e-06,  9.94238978e-06,  3.07148494e-07,  3.76873639e-06,
#    7.05408593e-06,  7.91965761e-07,  7.57105272e-06, -8.32880959e-06],
#  [-9.63335862e-06, -5.26288331e-06, -1.03121726e-05, -3.58419506e-07,
#    1.35406966e-06,  2.89626018e-07, -4.77348870e-06, -6.08817633e-07,
#   -1.46639321e-06, -7.64544101e-06,  9.44141010e-08,  1.22873979e-06,
#    1.82731284e-05,  6.54750866e-06, -1.29620686e-06, -5.43157539e-06,
#    7.98214446e-06,  5.94848349e-06,  3.67645517e-06,  5.81614672e-06,
#    4.14894365e-06, -9.47844047e-06, -1.27755773e-05,  5.73200767e-06,
#    2.65211972e-07, -2.37353241e-06, -3.94032436e-06, -3.31741704e-06],
#  [-6.68498152e-07, -1.73809701e-05, -3.56637365e-06, -1.97952535e-05,
#    4.59059001e-06, -2.30707056e-06, 3.14705709e-06,  3.28301351e-06,
#   -1.73204906e-06,  1.44742657e-05,  4.92568793e-06,  1.72216238e-05,
#    1.62519599e-06, -7.88491279e-06, -1.23851738e-05,  1.33965248e-05,
#   -8.62299389e-07,  1.34112355e-06,  4.02505959e-06, -6.03903801e-06,
#   -7.48341694e-06,  1.73077659e-07,  3.88512743e-06,  1.03152651e-05,
#   -1.26597093e-05,  3.65895110e-06,  1.72615427e-06, -1.32928244e-06],
#  [ 2.65054683e-06,  1.67519241e-06, -5.07864309e-06, -1.71734548e-05,
#   -1.05573179e-05, -4.83360766e-06, -3.67621156e-06, -3.48380682e-06,
#   -1.99000348e-05,  1.09961266e-05, -1.78549680e-06,  1.74573951e-05,
#   -1.26163646e-05, -3.04962582e-06,  8.26692434e-07, -6.95013006e-06,
#    5.42400272e-06,  2.13964036e-06,  3.51282800e-06,  1.80444327e-05,
#    6.79040125e-06,  8.16910597e-06, -1.89859129e-05,  6.46065699e-06,
#    2.90674780e-07,  3.19144081e-06, -1.12847604e-05,  6.22889672e-06],
#  [ 8.78268579e-06,  1.13093113e-05, -5.58818589e-06,  1.23438789e-05,
#    2.04650789e-05, 5.36122372e-06, -8.38044845e-06, -1.96287426e-06,
#   -8.31689981e-07, -4.02818078e-06, -4.24636211e-06,  1.48685567e-05,
#   -9.04811043e-06, -1.29117655e-05, -2.80440127e-06, -3.43666048e-06,
#    4.09846400e-06, -9.02558059e-06, -1.39202354e-05, -3.42544628e-06,
#   -6.84104820e-06, -6.04404427e-06,  1.57092407e-05,  8.27745650e-06,
#   -5.02272344e-06, -3.28642812e-06, -3.06938459e-06,  3.38692364e-06]]

helicopter(0, [500, 400, 300], [600, 500, 400, 300], "ddpg_chkp/large_helicopter/500400300600500400300/", "random_search", 100, 50000)

